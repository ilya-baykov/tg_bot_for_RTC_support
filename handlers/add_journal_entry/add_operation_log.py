import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from database.CRUD.read import EmployeesReader, ProcessDirectoryReader
from handlers.add_journal_entry.keyboard import add_journal_log_kb, EXIT_BUTTON_TEXT, SENT_BUTTON_TEXT
from handlers.filters_general import RegisteredUser
from handlers.add_journal_entry.state import AddOperationLogState, handle_state

logger = logging.getLogger(__name__)

add_journal_router = Router()


@add_journal_router.message(F.text == EXIT_BUTTON_TEXT)
async def exit_add_operation_log(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∂—É—Ä–Ω–∞–ª —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")


@add_journal_router.message(RegisteredUser(), Command('add_operation_log'))
async def command_add_operation_log(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∂—É—Ä–Ω–∞–ª–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏"""
    await message.answer(
        "üìù –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –∂—É—Ä–Ω–∞–ª —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã.\n\n"
        "üîÑ –ï—Å–ª–∏ –∫–∞–∫–æ–µ-—Ç–æ –ø–æ–ª–µ –≤—ã –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ '–Ω–∞–∑–∞–¥' –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.\n\n"
        "‚ùå –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –≤–≤–µ–¥–∏—Ç–µ 'exit'."
    )
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)")
    await state.set_state(AddOperationLogState.enter_process_name)


@add_journal_router.message(AddOperationLogState.enter_process_name)
async def enter_process_name(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø—Ä–æ—Ü–µ—Å—Å—É –∏ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¢–ü"""

    employee = await EmployeesReader().get_employee_by_telegram_id_or_username(telegram_id=str(message.from_user.id))
    process = await ProcessDirectoryReader().get_process(message.text)
    if process:
        await state.update_data({"process": process, "employee_name": employee.name})
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏",
                             reply_markup=add_journal_log_kb(back_button=True, exit_button=True))
        await state.set_state(AddOperationLogState.enter_error_description)
    else:
        await message.answer(f"–ü—Ä–æ—Ü–µ—Å—Å '{message.text}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä RPA –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.",
                             reply_markup=add_journal_log_kb(exit_button=True))
        await state.set_state(AddOperationLogState.enter_process_name)


@add_journal_router.message(AddOperationLogState.enter_error_description)
async def enter_error_description(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"""
    answer = await handle_state(message, state, "error_description",
                                previous_state=AddOperationLogState.enter_process_name,
                                previous_message="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)",
                                next_state=AddOperationLogState.enter_error_date,
                                next_message="–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—à–∏–±–∫–∏")

    await message.answer(answer, reply_markup=add_journal_log_kb(back_button=True, exit_button=True))


@add_journal_router.message(AddOperationLogState.enter_error_date)
async def enter_error_date(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ—à–∏–±–∫–∏"""
    answer = await handle_state(message, state, "error_date",
                                previous_state=AddOperationLogState.enter_error_description,
                                previous_message="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏",
                                next_state=AddOperationLogState.enter_error_reason,
                                next_message="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏")
    await message.answer(answer, reply_markup=add_journal_log_kb(back_button=True, exit_button=True))


@add_journal_router.message(AddOperationLogState.enter_error_reason)
async def enter_error_reason(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏"""
    answer = await handle_state(message, state, "error_reason",
                                previous_state=AddOperationLogState.enter_error_date,
                                previous_message="–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—à–∏–±–∫–∏",
                                next_state=AddOperationLogState.enter_error_solution,
                                next_message="–í–≤–µ–¥–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –æ—à–∏–±–∫–∏")
    await message.answer(answer, reply_markup=add_journal_log_kb(back_button=True, exit_button=True))


@add_journal_router.message(AddOperationLogState.enter_error_solution)
async def enter_error_solution(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –æ—à–∏–±–∫–∏"""
    answer = await handle_state(message, state, "error_solution",
                                previous_state=AddOperationLogState.enter_error_reason,
                                previous_message="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏",
                                next_state=AddOperationLogState.enter_date_solution,
                                next_message="–í–≤–µ–¥–∏—Ç–µ  –¥–∞—Ç—É —Ä–µ—à–µ–Ω–∏—è –æ—à–∏–±–∫–∏")
    await message.answer(answer, reply_markup=add_journal_log_kb(back_button=True, exit_button=True))


@add_journal_router.message(AddOperationLogState.enter_date_solution)
async def enter_date_solution(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ä–µ—à–µ–Ω–∏—è –æ—à–∏–±–∫–∏"""
    answer = await handle_state(message, state, "decision_date",
                                previous_state=AddOperationLogState.enter_error_solution,
                                previous_message="–í–≤–µ–¥–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –æ—à–∏–±–∫–∏",
                                next_state=AddOperationLogState.enter_type_error,
                                next_message="–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –æ—à–∏–±–∫–∏")
    await message.answer(answer, reply_markup=add_journal_log_kb(back_button=True, exit_button=True))


@add_journal_router.message(AddOperationLogState.enter_type_error)
async def enter_type_error(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏"""
    answer = await handle_state(message, state, "error_type",
                                previous_state=AddOperationLogState.enter_date_solution,
                                previous_message="–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–µ—à–µ–Ω–∏—è –æ—à–∏–±–∫–∏",
                                next_state=AddOperationLogState.saving_log_entry,
                                next_message="–í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
    await message.answer(answer, reply_markup=add_journal_log_kb(back_button=True, sent_button=True, exit_button=True))


@add_journal_router.message(AddOperationLogState.saving_log_entry)
async def save_journal_log(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏"""
    answer = await handle_state(message, state, "",
                                previous_state=AddOperationLogState.enter_type_error,
                                previous_message="–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –æ—à–∏–±–∫–∏")
    if answer == SENT_BUTTON_TEXT:
        data = await state.get_data()
        await message.answer(f"{data}")
        await state.clear()
        await message.answer(f"{await state.get_data()}")
    else:
        await message.answer(answer,
                             reply_markup=add_journal_log_kb(back_button=True, sent_button=True, exit_button=True))


def register_add_operation_log_handler(dp):
    dp.include_router(add_journal_router)
