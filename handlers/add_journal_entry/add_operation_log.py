import logging
from enum import Enum

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from database.CRUD.read import EmployeesReader, ProcessDirectoryReader, SchedulerTasksReader
from database.CRUD.—Åreate import OperationLogCreator
from database.enums import ActionStatus
from handlers.add_journal_entry.constant_text import EXIT_BUTTON_TEXT, SENT_BUTTON_TEXT
from handlers.add_journal_entry.keyboard import add_journal_log_kb
from handlers.add_journal_entry.state import AddOperationLogState, handle_state
from handlers.filters_general import RegisteredUser
from utility.ActionManager import ActionManager
from run_app.main_objects import scheduler
from utility.sheduler_functions import pause_scheduler_task, resume_scheduler_task

logger = logging.getLogger(__name__)

add_journal_router = Router()


class ErrorTypes(Enum):
    ROBOT_ERROR = "–û—à–∏–±–∫–∞ —Ä–æ–±–æ—Ç–∞ (–ø–ª–æ—Ö–∞—è –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å, –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –¢–ó, –Ω–µ—Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞))"
    STARTUP_ERROR = "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ (–ü—Ä–æ–±–ª–µ–º—ã –í–ú, –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞)	"
    BUSINESS_ERROR = "–ë–∏–∑–Ω–µ—Å –æ—à–∏–±–∫–∞ (–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ë–ü)"
    INFRASTRUCTURE_ERROR = "–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ (—Å–±–æ–π —Å–∏—Å—Ç–µ–º, –¥–æ—Å—Ç—É–ø–æ–≤, —Å–µ—Ä–≤–µ—Ä–æ–≤)"
    NO_VALUE = ""

    @classmethod
    def get_full_error_type(cls, description: str | None):
        if description:
            for error_type in cls:
                if description in error_type.value:
                    return error_type.value
        return None


@add_journal_router.message(F.text == EXIT_BUTTON_TEXT)
async def exit_add_operation_log(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∂—É—Ä–Ω–∞–ª —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ")


@add_journal_router.message(RegisteredUser(), Command('add_operation_log'))
async def command_add_operation_log(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∂—É—Ä–Ω–∞–ª–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏"""
    employee = await EmployeesReader().get_employee_by_telegram_id_or_username(telegram_id=str(message.from_user.id))

    # –°—Ç–∞–≤–∏–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞ –ø–∞—É–∑—É
    task_in_scheduler = await SchedulerTasksReader().get_last_task_by_employee(employee_id=employee.id)
    await pause_scheduler_task(task_in_scheduler)

    await message.answer(
        "üìù –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –∂—É—Ä–Ω–∞–ª —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã.\n\n"
        "üîÑ –ï—Å–ª–∏ –∫–∞–∫–æ–µ-—Ç–æ –ø–æ–ª–µ –≤—ã –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ –∫–ª–∞–≤–∏—à—É '–Ω–∞–∑–∞–¥' –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.\n\n"
        "‚ùå –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –Ω–∞–∂–º–∏—Ç–µ –∫–ª–∞–≤–∏—à—É '–í—ã—Ö–æ–¥'."
    )
    await state.set_state(AddOperationLogState.enter_process_name)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)")

    if task_in_scheduler:
        await state.update_data({"scheduler_task_id": task_in_scheduler.id})
    await state.update_data({"employee_name": employee.name})


@add_journal_router.message(AddOperationLogState.enter_process_name)
async def enter_process_name(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø—Ä–æ—Ü–µ—Å—Å—É –∏ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¢–ü"""

    process = await ProcessDirectoryReader().get_process(message.text)
    if process:
        await state.update_data({"process": process})
        await state.set_state(AddOperationLogState.enter_error_description)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏",
                             reply_markup=await add_journal_log_kb(state))
    else:
        similar_process = await ProcessDirectoryReader().get_similar_process(message.text)
        if similar_process:
            await message.answer(
                f"–ü—Ä–æ—Ü–µ—Å—Å '{message.text}' –Ω–µ –Ω–∞–π–¥–µ–Ω."
                f"\n–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É '{similar_process}'? "
                f"\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä RPA –µ—â–µ —Ä–∞–∑.",
                reply_markup=await add_journal_log_kb(state))
        else:
            await message.answer(f"–ü—Ä–æ—Ü–µ—Å—Å '{message.text}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä RPA –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.",
                                 reply_markup=await add_journal_log_kb(state))


@add_journal_router.message(AddOperationLogState.enter_error_description)
async def enter_error_description(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"""
    answer = await handle_state(message, state, "error_description",
                                previous_state=AddOperationLogState.enter_process_name,
                                previous_message="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)",
                                next_state=AddOperationLogState.enter_error_date,
                                next_message="–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—à–∏–±–∫–∏")

    await message.answer(answer, reply_markup=await add_journal_log_kb(state))


@add_journal_router.message(AddOperationLogState.enter_error_date)
async def enter_error_date(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ—à–∏–±–∫–∏"""
    answer = await handle_state(message, state, "error_date",
                                previous_state=AddOperationLogState.enter_error_description,
                                previous_message="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏",
                                next_state=AddOperationLogState.enter_error_reason,
                                next_message="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏")
    await message.answer(answer, reply_markup=await add_journal_log_kb(state))


@add_journal_router.message(AddOperationLogState.enter_error_reason)
async def enter_error_reason(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏"""
    answer = await handle_state(message, state, "error_reason",
                                previous_state=AddOperationLogState.enter_error_date,
                                previous_message="–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—à–∏–±–∫–∏",
                                next_state=AddOperationLogState.enter_error_solution,
                                next_message="–í–≤–µ–¥–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –æ—à–∏–±–∫–∏")
    await message.answer(answer, reply_markup=await add_journal_log_kb(state))


@add_journal_router.message(AddOperationLogState.enter_error_solution)
async def enter_error_solution(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –æ—à–∏–±–∫–∏"""
    answer = await handle_state(message, state, "error_solution",
                                previous_state=AddOperationLogState.enter_error_reason,
                                previous_message="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—à–∏–±–∫–∏",
                                next_state=AddOperationLogState.enter_date_solution,
                                next_message="–í–≤–µ–¥–∏—Ç–µ  –¥–∞—Ç—É —Ä–µ—à–µ–Ω–∏—è –æ—à–∏–±–∫–∏")
    await message.answer(answer, reply_markup=await add_journal_log_kb(state))


@add_journal_router.message(AddOperationLogState.enter_date_solution)
async def enter_date_solution(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ä–µ—à–µ–Ω–∏—è –æ—à–∏–±–∫–∏"""
    answer = await handle_state(message, state, "decision_date",
                                previous_state=AddOperationLogState.enter_error_solution,
                                previous_message="–í–≤–µ–¥–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –æ—à–∏–±–∫–∏",
                                next_state=AddOperationLogState.enter_ticket_OTRS,
                                next_message="–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ç –≤ OTRS")
    await message.answer(answer, reply_markup=await add_journal_log_kb(state))


@add_journal_router.message(AddOperationLogState.enter_ticket_OTRS)
async def enter_ticket_OTRS(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º –¢–∏–∫–µ—Ç –≤ OTRS"""
    answer = await handle_state(message, state, "OTRS_ticket",
                                previous_state=AddOperationLogState.enter_date_solution,
                                previous_message="–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–µ—à–µ–Ω–∏—è –æ—à–∏–±–∫–∏",
                                next_state=AddOperationLogState.enter_virtual_machine,
                                next_message="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –í–ú")

    await message.answer(answer, reply_markup=await add_journal_log_kb(state))


@add_journal_router.message(AddOperationLogState.enter_virtual_machine)
async def enter_virtual_machine(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –í–ú"""
    answer = await handle_state(message, state, "virtual_machine",
                                previous_state=AddOperationLogState.enter_ticket_OTRS,
                                previous_message="–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ç –≤ OTRS",
                                next_state=AddOperationLogState.enter_execution_time,
                                next_message="–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è,—á")
    await message.answer(answer, reply_markup=await add_journal_log_kb(state))


@add_journal_router.message(AddOperationLogState.enter_execution_time)
async def enter_execution_time(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—á)"""
    answer = await handle_state(message, state, "execution_time",
                                previous_state=AddOperationLogState.enter_virtual_machine,
                                previous_message="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –í–ú",
                                next_state=AddOperationLogState.enter_type_error,
                                next_message="–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –æ—à–∏–±–∫–∏")
    await message.answer(answer, reply_markup=await add_journal_log_kb(state))


@add_journal_router.message(AddOperationLogState.enter_type_error)
async def enter_type_error(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏"""
    answer = await handle_state(message, state, "error_type",
                                previous_state=AddOperationLogState.enter_date_solution,
                                previous_message="–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–µ—à–µ–Ω–∏—è –æ—à–∏–±–∫–∏",
                                next_state=AddOperationLogState.saving_log_entry,
                                next_message="–í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
    await message.answer(answer, reply_markup=await add_journal_log_kb(state))


@add_journal_router.message(AddOperationLogState.saving_log_entry)
async def save_journal_log(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏"""
    answer = await handle_state(message, state, "",
                                previous_state=AddOperationLogState.enter_type_error,
                                previous_message="–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –æ—à–∏–±–∫–∏")
    if answer == SENT_BUTTON_TEXT:

        data = await state.get_data()
        try:
            await OperationLogCreator.create_new_log(
                process_name=data["process"].process_name,  # –ù–æ–º–µ—Ä RPA
                employee_name=data["employee_name"],  # –ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –æ—Ç–≤–µ—á–∞—é—â–µ–≥–æ –∑–∞ –ø—Ä–æ—Ü–µ—Å—Å
                error_description=data["error_description"],  # –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
                error_date=data["error_date"],  # –î–∞—Ç–∞ –æ—à–∏–±–∫–∏ –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ
                error_reason=data["error_reason"],  # –ü—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏
                error_solution=data["error_solution"],  # –†–µ—à–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
                error_type=ErrorTypes.get_full_error_type(data["error_type"]),  # –û–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–∏–ø–∞ –æ—à–∏–±–æ–∫
                developer=data["process"].developer,  # –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –ø—Ä–æ—Ü–µ—Å—Å
                jira_link=data["process"].jira_link,  # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–±–æ—Ç–∞ –≤ Jira
                decision_date=data["decision_date"],  # –î–∞—Ç–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ
                jira_issue=data["process"].jira_issue,  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É –≤ Jira
                virtual_machine=data["virtual_machine"],  # –ù–æ–º–µ—Ä –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã
                execution_time=data["execution_time"],  # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —á.
                OTRS_ticket=data["OTRS_ticket"]  # –¢–∏–∫–µ—Ç –≤ OTRS
            )
            await message.answer(f"–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∂—É—Ä–Ω–∞–ª —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏")
            logger.info(f"–ó–∞–ø–∏—Å—å : {data['process'].process_name} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∂—É—Ä–Ω–∞–ª —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏")
            if data.get("scheduler_task_id"):
                await resume_scheduler_task(data["scheduler_task_id"])

        except Exception as e:
            await message.answer(f"–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ –∂—É—Ä–Ω–∞–ª —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            logger.info(
                f"–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {data['process'].process_name} –≤ –∂—É—Ä–Ω–∞–ª —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ "
                f"–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e}")
        finally:
            await state.clear()
    else:
        await message.answer(answer, reply_markup=await add_journal_log_kb(state))


def register_add_operation_log_handler(dp):
    dp.include_router(add_journal_router)
